function Jb = ur5BodyJacobian(q)
    % ur5BodyJacobian - Compute the Jacobian matrix for the UR5 robot
    % Input: 
    %   q: 6x1 joint space variables vector = [θ1, θ2, θ3, θ4, θ5, θ6].T
    % Output: 
    %   Jb: 6x6 Body Jacobian matrix
    
    th1 = q(1);
    th2 = q(2);
    th3 = q(3);
    th4 = q(4);
    th5 = q(5);
    th6 = q(6);

    l0 = 0.0892;
    l1 = 0.425; 
    l2 = 0.392; 
    l3 = 0.1093; 
    l4 = 0.09475; 
    l5 = 0.0825; 

    % Define the Body Jacobian 
    Jb = [
        -(1/2)*(-23 + l1 + l2)*cos(th2+th3+th4-th5) + 1/2*(-23 + l1 + l2)*cos(th2+th3+th4+th5) + ...
        sin(th2)*(l1*cos(th6)*sin(th5) - l4*cos(th6)*sin(th3)*sin(th4)*sin(th5) + cos(th3)*cos(th6)*((l5 + l3*cos(th5))*sin(th4) + l2*sin(th5)) - ...
        l3*sin(th3)*sin(th4)*sin(th6) - l5*cos(th5)*sin(th3)*sin(th4)*sin(th6) + cos(th4)*(cos(th6)*((l5 + l3*cos(th5))*sin(th3) + l4*cos(th3)*sin(th5)) + ...
        cos(th3)*(l3 + l5*cos(th5))*sin(th6))) + cos(th2)*(sin(th3)*(cos(th6)*((l5 + l3*cos(th5))*sin(th4) + (l2 + l4*cos(th4))*sin(th5)) + ...
        cos(th4)*(l3 + l5*cos(th5))*sin(th6)) + cos(th3)*(-cos(th4)*(l5 + l3*cos(th5))*cos(th6) + sin(th4)*(l4*cos(th6)*sin(th5) + (l3 + l5*cos(th5))*sin(th6)))), ...
        cos(th5)*(23 - l1 - l2 + (l4 + l2*cos(th4) + l1*cos(th3+th4))*cos(th6)) - (l2*sin(th4) + l1*sin(th3+th4) + l5*sin(th5))*sin(th6), ...
        cos(th5)*(23 - l1 - l2 + (l4 + l2*cos(th4))*cos(th6)) - (l2*sin(th4) + l5*sin(th5))*sin(th6), ...
        -cos(th5)*(-23 + l1 + l2 - l4*cos(th6)) - l5*sin(th5)*sin(th6), ...
        -l5*cos(th6), ...
        23 - l1 - l2;
        
        sin(th2)*((l3 + l5*cos(th5))*cos(th6)*sin(th3)*sin(th4) + (cos(th4)*(l5 + l3*cos(th5))*sin(th3) + (l1 - l4*sin(th3)*sin(th4))*sin(th5))*sin(th6)) + ...
        cos(th2)*sin(th3)*(((l5 + l3*cos(th5))*sin(th4) + l2*sin(th5))*sin(th6) + cos(th4)*(-(l3 + l5*cos(th5))*cos(th6) + l4*sin(th5)*sin(th6))) - ...
        cos(th3)*(-sin(th2)*((l5 + l3*cos(th5))*sin(th4) + l2*sin(th5))*sin(th6) + cos(th2)*sin(th4)*((l3 + l5*cos(th5))*cos(th6) - l4*sin(th5)*sin(th6)) + ...
        cos(th4)*((l3 + l5*cos(th5))*cos(th6)*sin(th2) + (cos(th2)*(l5 + l3*cos(th5)) - l4*sin(th2)*sin(th5))*sin(th6))), ...
        cos(th6)*((l2 + l1*cos(th3))*sin(th4) + l5*sin(th5)) + cos(th5)*(l4 - l1*sin(th3)*sin(th4))*sin(th6) + ...
        cos(th4)*(l1*cos(th6)*sin(th3) + (l2 + l1*cos(th3))*cos(th5)*sin(th6)), ...
        cos(th6)*(l2*sin(th4) + l5*sin(th5)) + (l4 + l2*cos(th4))*cos(th5)*sin(th6), ...
        l5*cos(th6)*sin(th5) + l4*cos(th5)*sin(th6), ...
        -l5*sin(th6), ...
        0;
        
        1/4*(-2*l1*sin(th2-th5) - 2*l2*sin(th2+th3-th5) + 2*l3*sin(th2+th3+th4-th5) - 2*l4*sin(th2+th3+th4-th5) - ...
        2*l1*sin(th2+th5) - 2*l2*sin(th2+th3+th5) - 2*l3*sin(th2+th3+th4+th5) - 2*l4*sin(th2+th3+th4+th5) + ...
        46*sin(th2+th3+th4-th6) - 2*l1*sin(th2+th3+th4-th6) - 2*l2*sin(th2+th3+th4-th6) - 23*sin(th2+th3+th4-th5-th6) + ...
        l1*sin(th2+th3+th4-th5-th6) + l2*sin(th2+th3+th4-th5-th6) - 23*sin(th2+th3+th4+th5-th6) + ...
        l1*sin(th2+th3+th4+th5-th6) + l2*sin(th2+th3+th4+th5-th6) - 46*sin(th2+th3+th4+th6) + ...
        2*l1*sin(th2+th3+th4+th6) + 2*l2*sin(th2+th3+th4+th6) - 23*sin(th2+th3+th4-th5+th6) + ...
        l1*sin(th2+th3+th4-th5+th6) + l2*sin(th2+th3+th4-th5+th6) - 23*sin(th2+th3+th4+th5+th6) + ...
        l1*sin(th2+th3+th4+th5+th6) + l2*sin(th2+th3+th4+th5+th6)), ...
        (l4 + l2*cos(th4) + l1*cos(th3+th4) + 23*cos(th6) - l1*cos(th6) - l2*cos(th6))*sin(th5), ...
        (l4 + l2*cos(th4) - (-23 + l1 + l2)*cos(th6))*sin(th5), ...
        (l4 - (-23 + l1 + l2)*cos(th6))*sin(th5), ...
        (-23 + l1 + l2)*sin(th6), ...
        0;
        
        1/4*(2*sin(th2+th3+th4-th6) - sin(th2+th3+th4-th5-th6) - sin(th2+th3+th4+th5-th6) - ...
        2*sin(th2+th3+th4+th6) - sin(th2+th3+th4-th5+th6) - sin(th2+th3+th4+th5+th6)), ...
        cos(th6)*sin(th5), ...
        cos(th6)*sin(th5), ...
        cos(th6)*sin(th5), ...
        -sin(th6), ...
        0;
        
        1/4*(2*cos(th2+th3+th4-th6) - cos(th2+th3+th4-th5-th6) - cos(th2+th3+th4+th5-th6) + ...
        2*cos(th2+th3+th4+th6) + cos(th2+th3+th4-th5+th6) + cos(th2+th3+th4+th5+th6)), ...
        sin(th5)*sin(th6), ...
        sin(th5)*sin(th6), ...
        sin(th5)*sin(th6), ...
        cos(th6), ...
        0;
        
        -sin(th2+th3+th4)*sin(th5), ...
        -cos(th5), ...
        -cos(th5), ...
        -cos(th5), ...
        0, ...
        -1
    ];

end
